{
  "address": "0x465cd8E3EDEd77362696e07A9DC1C4401ec59A2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pricefeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x711ffc2f493e5750331731253ea69a1293af9fd2fa46b6b3be2d413877441ca8",
  "receipt": {
    "to": null,
    "from": "0xC31C6c20571629eEf0006D0bAa9b44287DEF1D3E",
    "contractAddress": "0x465cd8E3EDEd77362696e07A9DC1C4401ec59A2E",
    "transactionIndex": 58,
    "gasUsed": "912283",
    "logsBloom": "0x
    "blockHash": "0xa83cdc931d4f378e83bf7851c8cd2293a14c1826e92dd004a8423ef1e8124334",
    "transactionHash": "0x711ffc2f493e5750331731253ea69a1293af9fd2fa46b6b3be2d413877441ca8",
    "logs": [],
    "blockNumber": 8261394,
    "cumulativeGasUsed": "11229672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "cbb4757d423e1f803b31702d8fc103b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pricefeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // we can use the methods described in the PriceConverter library directly on a uint256 number as if the uint256 object had all these methods inbuilt\\n    using PriceConverter for uint256;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    \\n    // as soon as this contract is called, the constructor will save the owner of the contract into this variable\\n    // The pricefeed is passed as an argument from the deploy script. We can pass as many arguments as we want and collect them here. \\n    constructor(address pricefeed) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(pricefeed);\\n\\n    }\\n\\n    function fund() public payable {\\n        // here we are directly calling the getConversionRate method on the uint256 object. This method is defined in PriceConverter.sol\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        // ETH/USD price feed address of Goerli Network.\\n        //AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n        return s_priceFeed.version();\\n    }\\n    // Look up modifiers in solidity. This is an additional property on the function. \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    // Using the onlyOwner modifier on this function. First the check in the modifier will be done followed by the function call. \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // Three ways in solidity to withdraw funds. \\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        // 'this' is the contract object\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x091827958f9f61379517c42fad27605e51bae8c42b72e5691db914e3b94f5d5e\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// https://docs.chain.link/getting-started/consuming-data-feeds/ \\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n       /*\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        ); */\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    // the first parameter here is the msg.value on which this function is called. \\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x0d334ea2c0eaeb8f23f5cc08713db97492e0f3ab8adf953ea0179c0e741bbbce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162001011380380620010118339818101604052810190610034919061011e565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100eb826100c0565b9050919050565b6100fb816100e0565b811461010657600080fd5b50565b600081519050610118816100f2565b92915050565b600060208284031215610134576101336100bb565b5b600061014284828501610109565b91505092915050565b610eb6806200015b6000396000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b6040516100af91906107f1565b60405180910390f35b3480156100c457600080fd5b506100cd610388565b005b3480156100db57600080fd5b506100f660048036038101906100f1919061086f565b6105cb565b60405161010391906107f1565b60405180910390f35b34801561011857600080fd5b506101216105e3565b60405161012e91906107f1565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b506101566105f0565b60405161016391906108ab565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108f2565b610616565b6040516101a091906108ab565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065590919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e9061097c565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027691906109cb565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610a36565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6002805490508110156104bb5760006002828154811061043557610434610a63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b390610a92565b915050610412565b50600067ffffffffffffffff8111156104d7576104d6610adb565b5b6040519080825280602002602001820160405280156105055781602001602082028036833780820191505090505b506002908051906020019061051b929190610731565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054290610b3b565b60006040518083038185875af1925050503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50509050806105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610b9c565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002818154811061062657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061066183610691565b90506000670de0b6b3a7640000858361067a9190610bbc565b6106849190610c45565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190610cee565b5050509150506402540be400816107299190610d69565b915050919050565b8280548282559060005260206000209081019282156107aa579160200282015b828111156107a95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610751565b5b5090506107b791906107bb565b5090565b5b808211156107d45760008160009055506001016107bc565b5090565b6000819050919050565b6107eb816107d8565b82525050565b600060208201905061080660008301846107e2565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b811461085757600080fd5b50565b60008135905061086981610843565b92915050565b6000602082840312156108855761088461080c565b5b60006108938482850161085a565b91505092915050565b6108a581610831565b82525050565b60006020820190506108c0600083018461089c565b92915050565b6108cf816107d8565b81146108da57600080fd5b50565b6000813590506108ec816108c6565b92915050565b6000602082840312156109085761090761080c565b5b6000610916848285016108dd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610966601b8361091f565b915061097182610930565b602082019050919050565b6000602082019050818103600083015261099581610959565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d6826107d8565b91506109e1836107d8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a1657610a1561099c565b5b828201905092915050565b600081519050610a30816108c6565b92915050565b600060208284031215610a4c57610a4b61080c565b5b6000610a5a84828501610a21565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a9d826107d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ad057610acf61099c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b25600083610b0a565b9150610b3082610b15565b600082019050919050565b6000610b4682610b18565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b86600b8361091f565b9150610b9182610b50565b602082019050919050565b60006020820190508181036000830152610bb581610b79565b9050919050565b6000610bc7826107d8565b9150610bd2836107d8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c0b57610c0a61099c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c50826107d8565b9150610c5b836107d8565b925082610c6b57610c6a610c16565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c9581610c76565b8114610ca057600080fd5b50565b600081519050610cb281610c8c565b92915050565b6000819050919050565b610ccb81610cb8565b8114610cd657600080fd5b50565b600081519050610ce881610cc2565b92915050565b600080600080600060a08688031215610d0a57610d0961080c565b5b6000610d1888828901610ca3565b9550506020610d2988828901610cd9565b9450506040610d3a88828901610a21565b9350506060610d4b88828901610a21565b9250506080610d5c88828901610ca3565b9150509295509295909350565b6000610d7482610cb8565b9150610d7f83610cb8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dbe57610dbd61099c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dfb57610dfa61099c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3857610e3761099c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7557610e7461099c565b5b82820290509291505056fea2646970667358221220bcb2640298caeee9343f8fbc4b250f6c9a07c18ea09782a5d3e026a680c1b94c64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e2565b6040516100af91906107f1565b60405180910390f35b3480156100c457600080fd5b506100cd610388565b005b3480156100db57600080fd5b506100f660048036038101906100f1919061086f565b6105cb565b60405161010391906107f1565b60405180910390f35b34801561011857600080fd5b506101216105e3565b60405161012e91906107f1565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b506101566105f0565b60405161016391906108ab565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108f2565b610616565b6040516101a091906108ab565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065590919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e9061097c565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027691906109cb565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610a36565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6002805490508110156104bb5760006002828154811061043557610434610a63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b390610a92565b915050610412565b50600067ffffffffffffffff8111156104d7576104d6610adb565b5b6040519080825280602002602001820160405280156105055781602001602082028036833780820191505090505b506002908051906020019061051b929190610731565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054290610b3b565b60006040518083038185875af1925050503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50509050806105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610b9c565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002818154811061062657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061066183610691565b90506000670de0b6b3a7640000858361067a9190610bbc565b6106849190610c45565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190610cee565b5050509150506402540be400816107299190610d69565b915050919050565b8280548282559060005260206000209081019282156107aa579160200282015b828111156107a95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610751565b5b5090506107b791906107bb565b5090565b5b808211156107d45760008160009055506001016107bc565b5090565b6000819050919050565b6107eb816107d8565b82525050565b600060208201905061080660008301846107e2565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b811461085757600080fd5b50565b60008135905061086981610843565b92915050565b6000602082840312156108855761088461080c565b5b60006108938482850161085a565b91505092915050565b6108a581610831565b82525050565b60006020820190506108c0600083018461089c565b92915050565b6108cf816107d8565b81146108da57600080fd5b50565b6000813590506108ec816108c6565b92915050565b6000602082840312156109085761090761080c565b5b6000610916848285016108dd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610966601b8361091f565b915061097182610930565b602082019050919050565b6000602082019050818103600083015261099581610959565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d6826107d8565b91506109e1836107d8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a1657610a1561099c565b5b828201905092915050565b600081519050610a30816108c6565b92915050565b600060208284031215610a4c57610a4b61080c565b5b6000610a5a84828501610a21565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a9d826107d8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ad057610acf61099c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b25600083610b0a565b9150610b3082610b15565b600082019050919050565b6000610b4682610b18565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b86600b8361091f565b9150610b9182610b50565b602082019050919050565b60006020820190508181036000830152610bb581610b79565b9050919050565b6000610bc7826107d8565b9150610bd2836107d8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c0b57610c0a61099c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c50826107d8565b9150610c5b836107d8565b925082610c6b57610c6a610c16565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c9581610c76565b8114610ca057600080fd5b50565b600081519050610cb281610c8c565b92915050565b6000819050919050565b610ccb81610cb8565b8114610cd657600080fd5b50565b600081519050610ce881610cc2565b92915050565b600080600080600060a08688031215610d0a57610d0961080c565b5b6000610d1888828901610ca3565b9550506020610d2988828901610cd9565b9450506040610d3a88828901610a21565b9350506060610d4b88828901610a21565b9250506080610d5c88828901610ca3565b9150509295509295909350565b6000610d7482610cb8565b9150610d7f83610cb8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dbe57610dbd61099c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dfb57610dfa61099c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3857610e3761099c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7557610e7461099c565b5b82820290509291505056fea2646970667358221220bcb2640298caeee9343f8fbc4b250f6c9a07c18ea09782a5d3e026a680c1b94c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}